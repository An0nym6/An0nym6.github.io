<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-30T15:20:19-07:00</updated><id>/feed.xml</id><title type="html">Random Thoughts</title><subtitle>©️ Designed by shuq3 &amp; An0nym6</subtitle><entry><title type="html">操作系统期末复习笔记</title><link href="/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="操作系统期末复习笔记" /><published>2020-04-29T21:00:00-07:00</published><updated>2020-04-29T21:00:00-07:00</updated><id>/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2020/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;这门课使用了斯坦福的 Pintos 项目，我觉得是一个很不错且有趣的项目。后半学期老师逐渐脱离教材，开始自由发挥……&lt;/p&gt;

&lt;h4 id=&quot;virtual-memory&quot;&gt;Virtual Memory&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Page and frame replacement algorithms:
    &lt;ol&gt;
      &lt;li&gt;FIFO: Can suffer from &lt;strong&gt;Belady’s Anomaly&lt;/strong&gt;: More available frames can cause more page faults.&lt;/li&gt;
      &lt;li&gt;Optimal Algorithm: Replace page that will not be used for longest period of time: Not possible because can’t read the future.&lt;/li&gt;
      &lt;li&gt;LRU: Generally good &amp;amp; frequently used.&lt;/li&gt;
      &lt;li&gt;Second-Chance Algorithm: Clock replacement. If a page has reference bit set to be 0, replace it; Otherwise, set the reference bit to 0, and check the next page.&lt;/li&gt;
      &lt;li&gt;Enhanced Second-Chance Algorithm: Consider (reference, modify).&lt;/li&gt;
      &lt;li&gt;Counting Algorithms: Keep a counter of number of references for each page:
        &lt;ol&gt;
          &lt;li&gt;LFU: Replace page with the smallest count.&lt;/li&gt;
          &lt;li&gt;MFU: Based on the argument that page with the smallest count was probably just brought in.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Working Set: The set of resources, e.g. objects in memory, that are needed to work on the current task.&lt;/li&gt;
  &lt;li&gt;Thrashing: Page fault to get page, replace existing frame, but quickly need the replaced frame back: ∑ size of locality &amp;gt; total memory size.
    &lt;ul&gt;
      &lt;li&gt;△ = working-set window = a fixed number of page references;&lt;/li&gt;
      &lt;li&gt;WSS&lt;sub&gt;i&lt;/sub&gt; (working set of process P&lt;sub&gt;i&lt;/sub&gt;) = total number of pages referenced in the most recent △;&lt;/li&gt;
      &lt;li&gt;D = ∑ WSS &lt;sub&gt;i&lt;/sub&gt; = total demand frames: Approximation of locality;&lt;/li&gt;
      &lt;li&gt;D &amp;gt; m: Thrashing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack growing down, heap growing up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;mass-storage-systems&quot;&gt;Mass-Storage Systems&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Disk scheduling algorithms:
    &lt;ol&gt;
      &lt;li&gt;FCFS.&lt;/li&gt;
      &lt;li&gt;SCAN: Also called elevator algorithm.&lt;/li&gt;
      &lt;li&gt;C-SCAN: When it reaches the other end, it immediately returns to the beginning of the disk, without servicing any requests on the return trip.&lt;/li&gt;
      &lt;li&gt;SSTF: Shortest seek time first.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Latencies:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;L1, L2, L3 cache&lt;/th&gt;
          &lt;th&gt;DRAM&lt;/th&gt;
          &lt;th&gt;SSD&lt;/th&gt;
          &lt;th&gt;Hard disk drive&lt;/th&gt;
          &lt;th&gt;Networking&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;1ns, 3ns, 30ns&lt;/td&gt;
          &lt;td&gt;100ns&lt;/td&gt;
          &lt;td&gt;100μs&lt;/td&gt;
          &lt;td&gt;10ms&lt;/td&gt;
          &lt;td&gt;100ms&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Write amplification: A single write to a Flash-based SSD requires multiple writes and data movement:
    &lt;ul&gt;
      &lt;li&gt;Wear leveling: There is a limited number of times to which a unit of physical FLASH memory can be written. So, to maximize the capacity of an SSD drive by avoiding wearing parts out, when a block is written, if it has been written a lot recently, it is relocated.&lt;/li&gt;
      &lt;li&gt;Garbage collection: Data is written in smaller units than it is erased. So, as blocks are erased they are wasted until the larger unit that includes them can be erased. To free up space, blocks may need to be moved.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;file-systems&quot;&gt;File Systems&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Caches:
    &lt;ol&gt;
      &lt;li&gt;Name cache (directory cache): Every time we look an inode # up, we cache it.&lt;/li&gt;
      &lt;li&gt;Block cache: a.k.a buffer cache or request cache, cache a block.
        &lt;ul&gt;
          &lt;li&gt;Unified cache: Page and block have the same size. This is a preferred solution for general-purpose OSes because flexibility is too important for a mixed workload with needs that vary over time.&lt;/li&gt;
          &lt;li&gt;Unified caches provide flexibility but it’s possible that one could starve the other: Data starving the processing that drives it.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Inode cache: Inodes for open files are always kept in memory (up to any resource limit, then LRUed out memory):
        &lt;ul&gt;
          &lt;li&gt;Because inode is needed every time an access to the file data is made.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimizations of organization of directory files:
    &lt;ol&gt;
      &lt;li&gt;A list of &amp;lt;name, inode#&amp;gt; tuples: For a few entries.&lt;/li&gt;
      &lt;li&gt;A tree (B-tree) of the same:
        &lt;ul&gt;
          &lt;li&gt;Dense on disk: Many comparisons per page;&lt;/li&gt;
          &lt;li&gt;Self-balancing;&lt;/li&gt;
          &lt;li&gt;Easy way to do in-order listing.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;fsck: File system check: Verifies and makes consistent the FS metadata.&lt;/li&gt;
  &lt;li&gt;Ext4 Journaling: For consistency checking at start-up. Without it all metadata needs to be checked. With it, only open transactions need to be checked.
    &lt;ol&gt;
      &lt;li&gt;Journaled: Both metadata &amp;amp; file data.&lt;/li&gt;
      &lt;li&gt;Ordered: Only metadata, but data are written to disk before the metadata is logged (or flushed into the FS).&lt;/li&gt;
      &lt;li&gt;Writeback: Only metadata and no control on the order.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Per process file descriptor table: It exists to allow processes to share the same open file table entry. This might, for example, be the case with fork()s. Consider, for example the case of a pipe. The parent creates the two file descriptors, one for read and one for write, and each child gets its own copy. This enables one child to write into the pipe and another child to read from it.&lt;/li&gt;
  &lt;li&gt;System-wide open file table: It keeps track of file sessions. For example, what mode(s), e.g. read, write, read-write, etc, are permitted for the session, and the current offset into the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;virtual-machines--containers&quot;&gt;Virtual Machines &amp;amp; Containers&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Why VM is important for cloud: Sharing of resources, fungibility, isolation, elasticity, robustness, metering.&lt;/li&gt;
  &lt;li&gt;Full-virtualization &amp;amp; paravirtualization:
    &lt;ul&gt;
      &lt;li&gt;Full-virtualization: Virtual machines runs entirely as a program in guest OS without any special support from guest OS.&lt;/li&gt;
      &lt;li&gt;Paravirtualization: Host OS modified to provide an API to enable VM to request the host to perform operations on behalf of the guest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hardware support: Eliminate problems for traps, hardware access like I/O, supervisor vs user mode.&lt;/li&gt;
  &lt;li&gt;Guest OS maintains a page table (shadow page table). When accesses fault, real OS looks in shadow page table, translates, fixes the page table, and operation resumes. Effectively, these are read-only page tables for the guest as they can only be updated by the host.&lt;/li&gt;
  &lt;li&gt;Containers: Maintain one host OS and share it for efficiency.&lt;/li&gt;
  &lt;li&gt;Mount points are the points where one file system grafted into another file system.&lt;/li&gt;
  &lt;li&gt;Hard link: It is the name -&amp;gt; inode mapping in a directory file. Soft link: The soft linked file has a separate inode value that points to the original file.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="计算机系统" /><summary type="html">这门课使用了斯坦福的 Pintos 项目，我觉得是一个很不错且有趣的项目。后半学期老师逐渐脱离教材，开始自由发挥……</summary></entry><entry><title type="html">操作系统期中复习笔记</title><link href="/2020/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="操作系统期中复习笔记" /><published>2020-03-04T20:00:00-08:00</published><updated>2020-03-04T20:00:00-08:00</updated><id>/2020/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2020/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;这门课使用了斯坦福的 Pintos 项目，我觉得是一个很不错且有趣的项目。&lt;/p&gt;

&lt;h4 id=&quot;chapter-1-2-3-4-5&quot;&gt;Chapter 1, 2, 3, 4, 5&lt;/h4&gt;

&lt;p&gt;🍺&lt;/p&gt;

&lt;h4 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Common atomic hardware instructions:
    &lt;ul&gt;
      &lt;li&gt;Test-and-Set: Return the original value of the passed in parameter, set the value of parameter to true;&lt;/li&gt;
      &lt;li&gt;Compare-and-Swap: Return the original value of the passed in parameter, set the value of parameter to new_value if the old value equals expected.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Monitor:
    &lt;ul&gt;
      &lt;li&gt;With Mesa semantics, when a waiting thread’s resource becomes available, it is moved from the signal queue back to the entry queue. The currently executing thread finishes executing, and the other thread will eventually be dispatched from the entry queue;&lt;/li&gt;
      &lt;li&gt;One risk of this implementation is that by the time that the unblocked process begins to execute again, the event it was waiting for has passed and the resource could be again unavailable. The cycle may repeat;&lt;/li&gt;
      &lt;li&gt;Most common, e.g. Java synchronized objects.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Spring%202020/1.png&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;chapter-7&quot;&gt;Chapter 7&lt;/h4&gt;

&lt;p&gt;🍺&lt;/p&gt;

&lt;h4 id=&quot;chapter-8&quot;&gt;Chapter 8&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Conditions for deadlock:
    &lt;ul&gt;
      &lt;li&gt;Mutual exclusion, hold and wait, no preemption, circular wait;&lt;/li&gt;
      &lt;li&gt;Invalidating circular wait is most common: Assign each resource a unique number, and resources must be acquired in order.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Banker algorithm:
    &lt;ul&gt;
      &lt;li&gt;Safe state =&amp;gt; no deadlocks; Unsafe state =&amp;gt; possible deadlocks; Avoidance =&amp;gt; ensure safe state;&lt;/li&gt;
      &lt;li&gt;https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;synchronization-supplement&quot;&gt;Synchronization Supplement&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Different locks:
    &lt;ul&gt;
      &lt;li&gt;Spin lock: Busy wait, must shared among processors, not FIFO or even bounded wait;&lt;/li&gt;
      &lt;li&gt;Ticket lock: Just one atomic instruction to block; Spins on not-atomic instruction, FIFO; But it spins on shared memory;&lt;/li&gt;
      &lt;li&gt;MCS lock: FIFO, locks are acquired and released in O(1) time, spinning is bounded by time it takes to add to queue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;homework-1&quot;&gt;Homework 1&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Resources can only be access in supervisor mode:
    &lt;ul&gt;
      &lt;li&gt;Hardware: I/O devices like disk drive, network board, keyboard, …&lt;/li&gt;
      &lt;li&gt;Data structure: PCB (process control block), disk buffer, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Context switch:
    &lt;ul&gt;
      &lt;li&gt;Process: Register context virtual memory context;&lt;/li&gt;
      &lt;li&gt;Thread: Register context.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Difference between “policy” and “mechanism”:
    &lt;ul&gt;
      &lt;li&gt;A policy is basically a goal. It is something the operating system is designed to achieve;&lt;/li&gt;
      &lt;li&gt;The mechanism is the implementation that achieves this goal;&lt;/li&gt;
      &lt;li&gt;Example: It might be policy to run higher priority processes first. The mechanism for doing this might be to have one list for each priority class and always running processes from the highest priority non-empty list.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“process” and “program”: A program is something written by a programmer. It is a specification. A process is an instance of a program in execution. A process is a running model. A program is a description of a model.&lt;/li&gt;
  &lt;li&gt;Key states in PCB &amp;amp; TCB:
    &lt;ul&gt;
      &lt;li&gt;PCB states: Status (running, runnable, etc), priority, process id, parent process id, accounting information, signal state, file state, and virtual memory state;&lt;/li&gt;
      &lt;li&gt;TCB states: Register state, attached/detached, scheduling priority, accounting information, thread id.&lt;/li&gt;
      &lt;li&gt;PCB and TCB don’t share any key state because it’s no necessary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gang scheduling: It is the identification of a group of threads as a group that should be run in parallel whenever possible. This is normally done when the threads are highly collaborative and communicate with each other a lot. By running them at the same time, the communication is fluid. Running them in series would result in a lot of blocking for communication while waiting for other threads in the gang to run.&lt;/li&gt;
  &lt;li&gt;Multiprogramming: Make system interactive &amp;amp; allow I/O and CPU overlap.&lt;/li&gt;
  &lt;li&gt;Multi-level feedback queues:
    &lt;ul&gt;
      &lt;li&gt;A scheduling algorithm that uses multiple queues of different priorities. Jobs in lower-priority queues get executed only if there’s no job in higher-priority queues. Jobs can be moved from one queue to another according to their “feedbacks” and some rules, and each queue can have different scheduling algorithms (round-robin, FCFS, etc);&lt;/li&gt;
      &lt;li&gt;Advantages: Processes might slowly be promoted as they age. They also might get rewarded and promoted for giving up the CPU soon after dispatch.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;homework-2&quot;&gt;Homework 2&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;An example of monitor:
    &lt;ul&gt;
      &lt;li&gt;Worth noticing that there’s no lock because the lock is intrinsic within the monitor construct. The language is offering us the mutual exclusion guarantee and hiding it from us.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt; Monitor MultiPurpose {
   cv allThreeCV, anyTwoCV, anyOneCV, stageCV;
   bool section0, section1, section2 = false;

   Entry mproom event_begin(event e) {
     switch (e) {
       case PLAY:
         while (section0 || section1 || section2)
           allThreeCV.wait();
         return {true, true, true};
       ...
     }
   }

   Entry void event_end(event e, mproom allocated_sections) {
     if (allocated_sections.section0) section0 = false;
     ...
     if (!section0 &amp;amp;&amp;amp; !section1 &amp;amp;&amp;amp; !section2)
       allThreeCV.signal();
     ...
   }
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The wait() and signal() operation upon a condition variable:
    &lt;ul&gt;
      &lt;li&gt;wait() is taking mutex as a parameter because: The mutex ensures that the check of the predicate and the wait are atomic. The logic of wait is such that the mutex will be freed before blocking but reacquired before waking up;&lt;/li&gt;
      &lt;li&gt;signal() is not because: Whatever is changing state needs to protect that state. The signal is simply signalling. Any internal state that is changed, i.e. wait list, is protected internally.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kernel data structures:
    &lt;ul&gt;
      &lt;li&gt;Kernel pages are mapped into all processes into the same address space so they are accessible in the same way, with the same page numbers and virtual addresses regardless of which page table is loaded;&lt;/li&gt;
      &lt;li&gt;The pages are marked as requiring privilege in the page table’s per-process metadata. This is enforced by the MMU. A fault is generated if an access is attempted without sufficient privilege.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="计算机系统" /><summary type="html">这门课使用了斯坦福的 Pintos 项目，我觉得是一个很不错且有趣的项目。</summary></entry><entry><title type="html">图像与视频处理期末复习笔记</title><link href="/2019/12/12/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="图像与视频处理期末复习笔记" /><published>2019-12-12T20:00:00-08:00</published><updated>2019-12-12T20:00:00-08:00</updated><id>/2019/12/12/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/12/12/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;不喜欢数学或者数学功底薄弱的同学慎选。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Real%20Final%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Real%20Final%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="图像处理" /><summary type="html">不喜欢数学或者数学功底薄弱的同学慎选。</summary></entry><entry><title type="html">计算机系统导论期末复习笔记</title><link href="/2019/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="计算机系统导论期末复习笔记" /><published>2019-12-10T20:00:00-08:00</published><updated>2019-12-10T20:00:00-08:00</updated><id>/2019/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;极力推荐这门课程。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/FCS%20Final%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/FCS%20Final%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="计算机系统" /><summary type="html">极力推荐这门课程。</summary></entry><entry><title type="html">软件验证与测试期末复习笔记</title><link href="/2019/12/10/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="软件验证与测试期末复习笔记" /><published>2019-12-10T20:00:00-08:00</published><updated>2019-12-10T20:00:00-08:00</updated><id>/2019/12/10/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/12/10/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Final%20Cheatsheet%201.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Final%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Final%20Cheatsheet%203.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="软件工程" /><summary type="html">功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。</summary></entry><entry><title type="html">Python 的奇妙用法</title><link href="/2019/11/27/Python-%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95.html" rel="alternate" type="text/html" title="Python 的奇妙用法" /><published>2019-11-27T20:00:00-08:00</published><updated>2019-11-27T20:00:00-08:00</updated><id>/2019/11/27/Python%20%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95</id><content type="html" xml:base="/2019/11/27/Python-%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95.html">&lt;p&gt;我从没系统地学习过 Python，我决定借此契机总结一下我个人不常用的 Python 技巧，以备后用。&lt;/p&gt;

&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;

&lt;h5 id=&quot;decorator&quot;&gt;Decorator&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def release(func):
    def inner(pokemon):
        print &quot;Release pokemon!&quot;
        func(pokemon)
        print &quot;Pokemon is released!&quot;
    return inner

@release
def getPokemon(pokemon):
    print pokemon + &quot;!&quot;

getPokemon(&quot;Pikachu&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;special-function-parameters&quot;&gt;Special Function Parameters&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def listPokemons(*args, **kwargs):
    print &quot;Pokemons with unknown type:&quot;
    print args
    print &quot;Pokemons with type:&quot;
    print kwargs

listPokemons(&quot;Pikachu&quot;, &quot;Eevee&quot;, dragon=&quot;Dratini&quot;, ghost=&quot;Gengar&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-SHELL&quot;&gt;$ python test.py
Pokemons with unknown type:
('Pikachu', 'Eevee')
Pokemons with type:
{'ghost': 'Gengar', 'dragon': 'Dratini'}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;generator&quot;&gt;Generator&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# Using the generator pattern (an iterable)
class firstn(object):
    def __init__(self, n):
        self.n = n
        self.num, self.nums = 0, []

    def __iter__(self):
        return self

    # Python 3 compatibility
    def __next__(self):
        return self.next()

    def next(self):
        if self.num &amp;lt; self.n:
            cur, self.num = self.num, self.num+1
            return cur
        else:
            raise StopIteration()

sum_of_first_n = sum(firstn(1000000))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;lambda-expression&quot;&gt;Lambda Expression&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;x = lambda a, b, c : a + b + c
print x(5, 6, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;testing-library&quot;&gt;Testing Library&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import unittest

class TestStringMethods(unittest.TestCase):
    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="求职" /><category term="Python 语言" /><summary type="html">我从没系统地学习过 Python，我决定借此契机总结一下我个人不常用的 Python 技巧，以备后用。</summary></entry><entry><title type="html">计算机网络知识总结</title><link href="/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html" rel="alternate" type="text/html" title="计算机网络知识总结" /><published>2019-11-27T20:00:00-08:00</published><updated>2019-11-27T20:00:00-08:00</updated><id>/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93</id><content type="html" xml:base="/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html">&lt;p&gt;Facebook 这个岗位虽然叫 Network Engineer，但是它的 OA 基本只考了 BGP 这一个协议，而且考得十分的深入。如果没有直接相关经历，可能很难通过它的考核。不过总结出的这份资料对我以后还是蛮有用的。&lt;/p&gt;

&lt;h4 id=&quot;computer-networks&quot;&gt;Computer Networks&lt;/h4&gt;

&lt;h5 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Routing &amp;amp; forwarding:
    &lt;ul&gt;
      &lt;li&gt;Routing: Determines source-destination route taken by packets;&lt;/li&gt;
      &lt;li&gt;Forwarding: Move packets from router’s input to appropriate router output.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Circuit switching (dedicated resources &amp;amp; not sharing) vs packet switching.&lt;/li&gt;
  &lt;li&gt;Delay: d&lt;sub&gt;nodal&lt;/sub&gt; = d&lt;sub&gt;proc&lt;/sub&gt; + d&lt;sub&gt;queue&lt;/sub&gt; + d&lt;sub&gt;trans&lt;/sub&gt; + d&lt;sub&gt;prop&lt;/sub&gt;
    &lt;ul&gt;
      &lt;li&gt;d&lt;sub&gt;proc&lt;/sub&gt;: Check bit errors, determine output;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;queue&lt;/sub&gt;: Waiting at output link for transmission;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;trans&lt;/sub&gt;: packet length / bandwidth;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;prop&lt;/sub&gt;: distance / speed of light.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Layers:
    &lt;ul&gt;
      &lt;li&gt;Application: Message;&lt;/li&gt;
      &lt;li&gt;Transport: Segment;&lt;/li&gt;
      &lt;li&gt;Network: Datagram;&lt;/li&gt;
      &lt;li&gt;Link: Frame;&lt;/li&gt;
      &lt;li&gt;Physical: Bits on the wire.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-2&quot;&gt;Chapter 2&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;TCP &amp;amp; UDP:
    &lt;ul&gt;
      &lt;li&gt;TCP: Reliable transport, flow control (won’t overwhelm receiver), congestion control (throttle sender when network overloaded), connection-oriented;&lt;/li&gt;
      &lt;li&gt;UDP: Unreliable data transfer;&lt;/li&gt;
      &lt;li&gt;SSL provides encrypted TCP connection (Integrity &amp;amp; authentication). SSL is at app layer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP connections can be persistent (multiple objects over single TCP connection) or non-persistent (at most one object over single TCP connection, need at least 2 RTT).&lt;/li&gt;
  &lt;li&gt;Client &amp;lt;– POP/IMAP/HTTP –&amp;gt; Mail server &amp;lt;– SMTP –&amp;gt; Mail server &amp;lt;– POP/IMAP/HTTP –&amp;gt; Client.&lt;/li&gt;
  &lt;li&gt;DNS (Doomain name system) is an app-layer protocol. It’s distributed and hierarchical.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Iterated query (left) &amp;amp; recursive query (right):&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/1.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/2.png&quot; width=&quot;48%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Types:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;A: Name: ranthot.cn, value: 8.8.8.8, type: A, TTL: …;&lt;/li&gt;
          &lt;li&gt;NS: Name: ranthot.cn, value: ns1.registrar.com, …;&lt;/li&gt;
          &lt;li&gt;CNAME: Name: ranthot.cn, value: servereast.backup2.ranthot.cn, …;&lt;/li&gt;
          &lt;li&gt;MX: Name: ranthot.cn, value: mailserver.ranthot.cn, ….&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Transport layer: Logical communication between processes; Network layer: Logical communication between hosts.&lt;/li&gt;
  &lt;li&gt;Multiplexing &amp;amp; demultiplexing:
    &lt;ul&gt;
      &lt;li&gt;Multiplexing: Handle data from multiple sockets, add transport header;&lt;/li&gt;
      &lt;li&gt;Demultiplexing: Use header info to deliver received segments to correct socket.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Internet checksum: Add together, add carryout, then one’s complement.&lt;/li&gt;
  &lt;li&gt;RDT (Reliable data transfer):
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/3.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/4.png&quot; width=&quot;48%&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go-back-N &amp;amp; selective repeat:
    &lt;ul&gt;
      &lt;li&gt;Go-back-N: Send N unacked packets in pipeline; Receiver only sends cumulative ACK; Sender has timer for oldest unacked packet;&lt;/li&gt;
      &lt;li&gt;Selective repeat: Send N unacked packets in pipeline: Receiver send individual ack for each; Sender has timer for each packet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP segment structure:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/5.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timeout interval for TCP:
    &lt;ul&gt;
      &lt;li&gt;EstimatedRTT = (1 - α) * EstimatedRTT + α * SampleRTT, α can be 0.125;&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;DevRTT = (1 - β) * DevRTT + β *&lt;/td&gt;
              &lt;td&gt;SampleRTT - EstimatedRTT&lt;/td&gt;
              &lt;td&gt;, β can be 0.25;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;TimeoutInterval = EstimatedRTT + 4 * DevRTT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP fast retransmit: If sender receives 3 ACKs for same data (triple duplicate ACK), resend unacked segment with smallest seq # without waiting for the timeout.&lt;/li&gt;
  &lt;li&gt;TCP flow control: Receiver “advertises” free buffer space by including rwnd (free buffer space size).&lt;/li&gt;
  &lt;li&gt;TCP building a connection and closing a connection:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/6.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/7.png&quot; width=&quot;48%&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP congestion control:
    &lt;ul&gt;
      &lt;li&gt;MSS: Maximum segment size;&lt;/li&gt;
      &lt;li&gt;AIMD: Additive increase (increase cwnd by 1 MSS every RTT until loss); Multiplicative decrease (cut cwnd in half after loss);&lt;/li&gt;
      &lt;li&gt;Slow start: Initially cwnd = 1 MSS, double cwnd every RTT until first loss event;&lt;/li&gt;
      &lt;li&gt;TCP Reno &amp;amp; TCP Tahoe:
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/8.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TCP is fair.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ECN (Explicit congestion notification): Two bits in IP header marked by router to indicate congestion.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Data plane &amp;amp; control plane:
    &lt;ul&gt;
      &lt;li&gt;Data plane: Per-router function, forwarding function;&lt;/li&gt;
      &lt;li&gt;Control plane: Network-wide logic, two approaches:
        &lt;ul&gt;
          &lt;li&gt;Traditional routing algorithms: Implemented in routers;&lt;/li&gt;
          &lt;li&gt;SDN (Software-defined networking): Implemented in (remote) server.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Destination-based forwarding is using longest prefix matching: Often preformed using TCAMs (ternary content addressable memories).
    &lt;ul&gt;
      &lt;li&gt;Content addressable: Present address to TCAM, retrieve address in one clock cycle, regardless of table size.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Switching fabrics: Memory, bus, crossbar.&lt;/li&gt;
  &lt;li&gt;HOL (Head-of-the-Line) blocking.&lt;/li&gt;
  &lt;li&gt;Input buffer overflow and output port buffer overflow can both lead to queueing delay and loss.&lt;/li&gt;
  &lt;li&gt;IP datagram format:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/9.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network links have MTU (max transfer size), so large IP datagram divided into smaller (fragmented) datagrams and “reassembled” only at final destination.&lt;/li&gt;
  &lt;li&gt;One IP address (32-bit) per interface.&lt;/li&gt;
  &lt;li&gt;Subnet: Device interfaces with same subnet part of IP address, can physically reach each other without intervening router. Isolated islands when you remove the routers.&lt;/li&gt;
  &lt;li&gt;CIDR (Classless InterDomain Routing): a.b.c.d/x.&lt;/li&gt;
  &lt;li&gt;DHCP (Dynamic Host Configuration Protocol): Dynamically get address from a server:
    &lt;ul&gt;
      &lt;li&gt;Host broadcasts “DHCP discover” (optional);&lt;/li&gt;
      &lt;li&gt;DHCP server responds with “DHCP offer” (optional);&lt;/li&gt;
      &lt;li&gt;Host requests IP address: “DHCP request”;&lt;/li&gt;
      &lt;li&gt;DHCP server sends address: “DHCP ack”;&lt;/li&gt;
      &lt;li&gt;DHCP can return more than just allocated IP address:
        &lt;ul&gt;
          &lt;li&gt;First-hop router;&lt;/li&gt;
          &lt;li&gt;Name and IP of DNS server;&lt;/li&gt;
          &lt;li&gt;Network mask.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NAT (Network address translation): All datagrams leaving local network have same single source NAT IP address, but different source port number.&lt;/li&gt;
  &lt;li&gt;IPv6 datagram format:
    &lt;ul&gt;
      &lt;li&gt;Fixed-length 40 byte header &amp;amp; no fragmentation allowed;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/10.png&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Tunneling: IPv6 datagram carried as payload in IPv4 datagram among IPv4 routers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OpenFlow: Match + action to unify different kinds of devices (router, switch, firewall, NAT). Examples:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/11.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Dijkstra’s algorithm:
    &lt;ul&gt;
      &lt;li&gt;A link-state routing algorithm;&lt;/li&gt;
      &lt;li&gt;https://ranthot.cn/2018/10/09/%E7%AE%97%E6%B3%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html;&lt;/li&gt;
      &lt;li&gt;Oscillations possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bellman-Ford algorithm:
    &lt;ul&gt;
      &lt;li&gt;Distance vector algorithm;&lt;/li&gt;
      &lt;li&gt;Each node sends its own distance vector estimate to neighbors, when x receives new DV, it updates its own DV using B-F:
        &lt;ul&gt;
          &lt;li&gt;D&lt;sub&gt;x&lt;/sub&gt;(y) = min&lt;sub&gt;v&lt;/sub&gt;{c(x, v) + D&lt;sub&gt;v&lt;/sub&gt;(y)}.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Iterative, asynchronous, distributed;&lt;/li&gt;
      &lt;li&gt;Count to infinity problem &amp;amp; poisoned reverse &amp;amp; split horizon: https://www.geeksforgeeks.org/route-poisoning-and-count-to-infinity-problem-in-routing/.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scalable routing:
    &lt;ul&gt;
      &lt;li&gt;AS (Autonomous system).&lt;/li&gt;
      &lt;li&gt;Intra-AS routing, also known as IGP (Interior gateway protocols):
        &lt;ul&gt;
          &lt;li&gt;RIP (Routing Information Protocol);&lt;/li&gt;
          &lt;li&gt;OSPF (Open Shortest Path First, IS-IS (Intermediate System to Intermediate System) is essentially same as OSPF):
            &lt;ul&gt;
              &lt;li&gt;Using link-state algorithm (Dijkstra’s algorithm) over IP;&lt;/li&gt;
              &lt;li&gt;Support security, can have multiple same-cost paths, support both uni- and multi-cast, can be hierarchical.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;IGRP (Interior Gatewat Routing Protocol).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Inter-AS routing:
        &lt;ul&gt;
          &lt;li&gt;BGP (Border Gateway Protocol):
            &lt;ul&gt;
              &lt;li&gt;eBGP: Obtain subnet reachability information from neighboring ASes;&lt;/li&gt;
              &lt;li&gt;iBGP: Propagate reachability information to all AS-internal routers;&lt;/li&gt;
              &lt;li&gt;Exchange over TCP connection;&lt;/li&gt;
              &lt;li&gt;Hot potatp routing: Choose local gateway with least cost, don’t worry about inter-domain cost.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Intra-AS can focus on performance, while for inter-AS, policy may dominate over performance.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems with traditional routing algorithms: Can’t manipulate routes, do load balancing. But SDN can achieve that.&lt;/li&gt;
  &lt;li&gt;ICMP: Internet control message protocol:
    &lt;ul&gt;
      &lt;li&gt;Network-layer “above” IP: ICMP carried in IP datagrams;&lt;/li&gt;
      &lt;li&gt;Used to report errors (unreachable host), echo request/reply (ping).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SNMP (Simple network management protocol), MIB (Management Information Base).&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Link layer implemented in “adaptor” (network interface card NIC) or on a chip.&lt;/li&gt;
  &lt;li&gt;Cyclic redundancy check:
    &lt;ul&gt;
      &lt;li&gt;Let D be the data, G be r+1 bits generator, R be r CRC bits;&lt;/li&gt;
      &lt;li&gt;R = remainder(D * 2&lt;sup&gt;r&lt;/sup&gt; / G);&lt;/li&gt;
      &lt;li&gt;Can detect all burst errors less than r+1 bits.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC protocols:
    &lt;ul&gt;
      &lt;li&gt;Channel parititioning:
        &lt;ul&gt;
          &lt;li&gt;TDMA: Time division multiple access;&lt;/li&gt;
          &lt;li&gt;FDMA: Frequency division multiple access;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Random access protocols:
        &lt;ul&gt;
          &lt;li&gt;Slotted ALOHA: If collison, retransmit frame in subsequent slot with probility p until success. Efficiency: 37%;&lt;/li&gt;
          &lt;li&gt;ALOHA: Similiar to slotted ALOHA, but no slots. Efficiency: 18%;&lt;/li&gt;
          &lt;li&gt;CSMA (Carrier sense multiple access):
            &lt;ul&gt;
              &lt;li&gt;If channel sensed idle: transmit. Collisions can still occur due to delay;&lt;/li&gt;
              &lt;li&gt;CSMA/CD: Collisions detected within short time and aborted; Binary (exponential) backoff after collision.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Taking turns: Polling from central site, token passing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC address (48 bits).
    &lt;ul&gt;
      &lt;li&gt;ARP (Address resolution protocol): A wants to send datagram to B, A broadcasts ARP query, B receives it and reply to A with its MAC address, A caches IP-MAC pair.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ethernet: “Dominant” wired LAN technology.
    &lt;ul&gt;
      &lt;li&gt;Physical topology: bus, star.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Switch:
    &lt;ul&gt;
      &lt;li&gt;Maintain a self-learned switch table;&lt;/li&gt;
      &lt;li&gt;
        &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;if entry found for dest:
    if dest from which frame arrived:
        drop
    else:
        forward frame
else:
    flood
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VLAN (Virtual Local Area Network): Multiple virtual LANs over single LAN infrastructure.&lt;/li&gt;
  &lt;li&gt;Multiprotocol label switching (MPLS): High-speed IP forwarding using fixed length label (instead of IP address), using information of both src and dest.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="求职" /><category term="网络" /><summary type="html">Facebook 这个岗位虽然叫 Network Engineer，但是它的 OA 基本只考了 BGP 这一个协议，而且考得十分的深入。如果没有直接相关经历，可能很难通过它的考核。不过总结出的这份资料对我以后还是蛮有用的。</summary></entry><entry><title type="html">计算机系统导论期中复习笔记</title><link href="/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="计算机系统导论期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;极力推荐这门课程。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/FCS%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="计算机系统" /><summary type="html">极力推荐这门课程。</summary></entry><entry><title type="html">图像与视频处理期中复习笔记</title><link href="/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="图像与视频处理期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;不喜欢数学或者数学功底薄弱的同学慎选。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Midterm%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="图像处理" /><summary type="html">不喜欢数学或者数学功底薄弱的同学慎选。</summary></entry><entry><title type="html">软件验证与测试期中复习笔记</title><link href="/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="软件验证与测试期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Midterm%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="软件工程" /><summary type="html">功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。</summary></entry></feed>
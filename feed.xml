<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-11-30T16:24:17-08:00</updated><id>/feed.xml</id><title type="html">Random Thoughts</title><subtitle>©️ Designed by shuq3 &amp; An0nym6</subtitle><entry><title type="html">Python 的奇妙用法</title><link href="/2019/11/27/Python-%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95.html" rel="alternate" type="text/html" title="Python 的奇妙用法" /><published>2019-11-27T20:00:00-08:00</published><updated>2019-11-27T20:00:00-08:00</updated><id>/2019/11/27/Python%20%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95</id><content type="html" xml:base="/2019/11/27/Python-%E7%9A%84%E5%A5%87%E5%A6%99%E7%94%A8%E6%B3%95.html">&lt;p&gt;我从没系统地学习过 Python，我决定借此契机总结一下我个人不常用的 Python 技巧，以备后用。&lt;/p&gt;

&lt;h4 id=&quot;python&quot;&gt;Python&lt;/h4&gt;

&lt;h5 id=&quot;decorator&quot;&gt;Decorator&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def release(func):
    def inner(pokemon):
        print &quot;Release pokemon!&quot;
        func(pokemon)
        print &quot;Pokemon is released!&quot;
    return inner

@release
def getPokemon(pokemon):
    print pokemon + &quot;!&quot;

getPokemon(&quot;Pikachu&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;special-function-parameters&quot;&gt;Special Function Parameters&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def listPokemons(*args, **kwargs):
    print &quot;Pokemons with unknown type:&quot;
    print args
    print &quot;Pokemons with type:&quot;
    print kwargs

listPokemons(&quot;Pikachu&quot;, &quot;Eevee&quot;, dragon=&quot;Dratini&quot;, ghost=&quot;Gengar&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-SHELL&quot;&gt;$ python test.py
Pokemons with unknown type:
('Pikachu', 'Eevee')
Pokemons with type:
{'ghost': 'Gengar', 'dragon': 'Dratini'}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;generator&quot;&gt;Generator&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# Using the generator pattern (an iterable)
class firstn(object):
    def __init__(self, n):
        self.n = n
        self.num, self.nums = 0, []

    def __iter__(self):
        return self

    # Python 3 compatibility
    def __next__(self):
        return self.next()

    def next(self):
        if self.num &amp;lt; self.n:
            cur, self.num = self.num, self.num+1
            return cur
        else:
            raise StopIteration()

sum_of_first_n = sum(firstn(1000000))
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;lambda-expression&quot;&gt;Lambda Expression&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;x = lambda a, b, c : a + b + c
print x(5, 6, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;testing-library&quot;&gt;Testing Library&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import unittest

class TestStringMethods(unittest.TestCase):
    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="求职" /><category term="网络" /><summary type="html">我从没系统地学习过 Python，我决定借此契机总结一下我个人不常用的 Python 技巧，以备后用。</summary></entry><entry><title type="html">计算机网络知识总结</title><link href="/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html" rel="alternate" type="text/html" title="计算机网络知识总结" /><published>2019-11-27T20:00:00-08:00</published><updated>2019-11-27T20:00:00-08:00</updated><id>/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93</id><content type="html" xml:base="/2019/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html">&lt;p&gt;Facebook 这个岗位虽然叫 Network Engineer，但是它的 OA 基本只考了 BGP 这一个协议，而且考得十分的深入。如果没有直接相关经历，可能很难通过它的考核。不过总结出的这份资料对我以后还是蛮有用的。&lt;/p&gt;

&lt;h4 id=&quot;computer-networks&quot;&gt;Computer Networks&lt;/h4&gt;

&lt;h5 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Routing &amp;amp; forwarding:
    &lt;ul&gt;
      &lt;li&gt;Routing: Determines source-destination route taken by packets;&lt;/li&gt;
      &lt;li&gt;Forwarding: Move packets from router’s input to appropriate router output.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Circuit switching (dedicated resources &amp;amp; not sharing) vs packet switching.&lt;/li&gt;
  &lt;li&gt;Delay: d&lt;sub&gt;nodal&lt;/sub&gt; = d&lt;sub&gt;proc&lt;/sub&gt; + d&lt;sub&gt;queue&lt;/sub&gt; + d&lt;sub&gt;trans&lt;/sub&gt; + d&lt;sub&gt;prop&lt;/sub&gt;
    &lt;ul&gt;
      &lt;li&gt;d&lt;sub&gt;proc&lt;/sub&gt;: Check bit errors, determine output;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;queue&lt;/sub&gt;: Waiting at output link for transmission;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;trans&lt;/sub&gt;: packet length / bandwidth;&lt;/li&gt;
      &lt;li&gt;d&lt;sub&gt;prop&lt;/sub&gt;: distance / speed of light.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Layers:
    &lt;ul&gt;
      &lt;li&gt;Application: Message;&lt;/li&gt;
      &lt;li&gt;Transport: Segment;&lt;/li&gt;
      &lt;li&gt;Network: Datagram;&lt;/li&gt;
      &lt;li&gt;Link: Frame;&lt;/li&gt;
      &lt;li&gt;Physical: Bits on the wire.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-2&quot;&gt;Chapter 2&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;TCP &amp;amp; UDP:
    &lt;ul&gt;
      &lt;li&gt;TCP: Reliable transport, flow control (won’t overwhelm receiver), congestion control (throttle sender when network overloaded), connection-oriented;&lt;/li&gt;
      &lt;li&gt;UDP: Unreliable data transfer;&lt;/li&gt;
      &lt;li&gt;SSL provides encrypted TCP connection (Integrity &amp;amp; authentication). SSL is at app layer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP connections can be persistent (multiple objects over single TCP connection) or non-persistent (at most one object over single TCP connection, need at least 2 RTT).&lt;/li&gt;
  &lt;li&gt;Client &amp;lt;– POP/IMAP/HTTP –&amp;gt; Mail server &amp;lt;– SMTP –&amp;gt; Mail server &amp;lt;– POP/IMAP/HTTP –&amp;gt; Client.&lt;/li&gt;
  &lt;li&gt;DNS (Doomain name system) is an app-layer protocol. It’s distributed and hierarchical.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Iterated query (left) &amp;amp; recursive query (right):&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/1.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/2.png&quot; width=&quot;48%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Types:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;A: Name: ranthot.cn, value: 8.8.8.8, type: A, TTL: …;&lt;/li&gt;
          &lt;li&gt;NS: Name: ranthot.cn, value: ns1.registrar.com, …;&lt;/li&gt;
          &lt;li&gt;CNAME: Name: ranthot.cn, value: servereast.backup2.ranthot.cn, …;&lt;/li&gt;
          &lt;li&gt;MX: Name: ranthot.cn, value: mailserver.ranthot.cn, ….&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-3&quot;&gt;Chapter 3&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Transport layer: Logical communication between processes; Network layer: Logical communication between hosts.&lt;/li&gt;
  &lt;li&gt;Multiplexing &amp;amp; demultiplexing:
    &lt;ul&gt;
      &lt;li&gt;Multiplexing: Handle data from multiple sockets, add transport header;&lt;/li&gt;
      &lt;li&gt;Demultiplexing: Use header info to deliver received segments to correct socket.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Internet checksum: Add together, add carryout, then one’s complement.&lt;/li&gt;
  &lt;li&gt;RDT (Reliable data transfer):
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/3.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/4.png&quot; width=&quot;48%&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go-back-N &amp;amp; selective repeat:
    &lt;ul&gt;
      &lt;li&gt;Go-back-N: Send N unacked packets in pipeline; Receiver only sends cumulative ACK; Sender has timer for oldest unacked packet;&lt;/li&gt;
      &lt;li&gt;Selective repeat: Send N unacked packets in pipeline: Receiver send individual ack for each; Sender has timer for each packet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP segment structure:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/5.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timeout interval for TCP:
    &lt;ul&gt;
      &lt;li&gt;EstimatedRTT = (1 - α) * EstimatedRTT + α * SampleRTT, α can be 0.125;&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;DevRTT = (1 - β) * DevRTT + β *&lt;/td&gt;
              &lt;td&gt;SampleRTT - EstimatedRTT&lt;/td&gt;
              &lt;td&gt;, β can be 0.25;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;TimeoutInterval = EstimatedRTT + 4 * DevRTT.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP fast retransmit: If sender receives 3 ACKs for same data (triple duplicate ACK), resend unacked segment with smallest seq # without waiting for the timeout.&lt;/li&gt;
  &lt;li&gt;TCP flow control: Receiver “advertises” free buffer space by including rwnd (free buffer space size).&lt;/li&gt;
  &lt;li&gt;TCP building a connection and closing a connection:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/6.png&quot; width=&quot;48%&quot; /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/7.png&quot; width=&quot;48%&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP congestion control:
    &lt;ul&gt;
      &lt;li&gt;MSS: Maximum segment size;&lt;/li&gt;
      &lt;li&gt;AIMD: Additive increase (increase cwnd by 1 MSS every RTT until loss); Multiplicative decrease (cut cwnd in half after loss);&lt;/li&gt;
      &lt;li&gt;Slow start: Initially cwnd = 1 MSS, double cwnd every RTT until first loss event;&lt;/li&gt;
      &lt;li&gt;TCP Reno &amp;amp; TCP Tahoe:
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/8.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TCP is fair.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ECN (Explicit congestion notification): Two bits in IP header marked by router to indicate congestion.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-4&quot;&gt;Chapter 4&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Data plane &amp;amp; control plane:
    &lt;ul&gt;
      &lt;li&gt;Data plane: Per-router function, forwarding function;&lt;/li&gt;
      &lt;li&gt;Control plane: Network-wide logic, two approaches:
        &lt;ul&gt;
          &lt;li&gt;Traditional routing algorithms: Implemented in routers;&lt;/li&gt;
          &lt;li&gt;SDN (Software-defined networking): Implemented in (remote) server.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Destination-based forwarding is using longest prefix matching: Often preformed using TCAMs (ternary content addressable memories).
    &lt;ul&gt;
      &lt;li&gt;Content addressable: Present address to TCAM, retrieve address in one clock cycle, regardless of table size.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Switching fabrics: Memory, bus, crossbar.&lt;/li&gt;
  &lt;li&gt;HOL (Head-of-the-Line) blocking.&lt;/li&gt;
  &lt;li&gt;Input buffer overflow and output port buffer overflow can both lead to queueing delay and loss.&lt;/li&gt;
  &lt;li&gt;IP datagram format:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/9.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network links have MTU (max transfer size), so large IP datagram divided into smaller (fragmented) datagrams and “reassembled” only at final destination.&lt;/li&gt;
  &lt;li&gt;One IP address (32-bit) per interface.&lt;/li&gt;
  &lt;li&gt;Subnet: Device interfaces with same subnet part of IP address, can physically reach each other without intervening router. Isolated islands when you remove the routers.&lt;/li&gt;
  &lt;li&gt;CIDR (Classless InterDomain Routing): a.b.c.d/x.&lt;/li&gt;
  &lt;li&gt;DHCP (Dynamic Host Configuration Protocol): Dynamically get address from a server:
    &lt;ul&gt;
      &lt;li&gt;Host broadcasts “DHCP discover” (optional);&lt;/li&gt;
      &lt;li&gt;DHCP server responds with “DHCP offer” (optional);&lt;/li&gt;
      &lt;li&gt;Host requests IP address: “DHCP request”;&lt;/li&gt;
      &lt;li&gt;DHCP server sends address: “DHCP ack”;&lt;/li&gt;
      &lt;li&gt;DHCP can return more than just allocated IP address:
        &lt;ul&gt;
          &lt;li&gt;First-hop router;&lt;/li&gt;
          &lt;li&gt;Name and IP of DNS server;&lt;/li&gt;
          &lt;li&gt;Network mask.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NAT (Network address translation): All datagrams leaving local network have same single source NAT IP address, but different source port number.&lt;/li&gt;
  &lt;li&gt;IPv6 datagram format:
    &lt;ul&gt;
      &lt;li&gt;Fixed-length 40 byte header &amp;amp; no fragmentation allowed;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/10.png&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Tunneling: IPv6 datagram carried as payload in IPv4 datagram among IPv4 routers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OpenFlow: Match + action to unify different kinds of devices (router, switch, firewall, NAT). Examples:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/Job%20Hunting/11.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-5&quot;&gt;Chapter 5&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Dijkstra’s algorithm:
    &lt;ul&gt;
      &lt;li&gt;A link-state routing algorithm;&lt;/li&gt;
      &lt;li&gt;https://ranthot.cn/2018/10/09/%E7%AE%97%E6%B3%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html;&lt;/li&gt;
      &lt;li&gt;Oscillations possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bellman-Ford algorithm:
    &lt;ul&gt;
      &lt;li&gt;Distance vector algorithm;&lt;/li&gt;
      &lt;li&gt;Each node sends its own distance vector estimate to neighbors, when x receives new DV, it updates its own DV using B-F:
        &lt;ul&gt;
          &lt;li&gt;D&lt;sub&gt;x&lt;/sub&gt;(y) = min&lt;sub&gt;v&lt;/sub&gt;{c(x, v) + D&lt;sub&gt;v&lt;/sub&gt;(y)}.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Iterative, asynchronous, distributed;&lt;/li&gt;
      &lt;li&gt;Count to infinity problem &amp;amp; poisoned reverse &amp;amp; split horizon: https://www.geeksforgeeks.org/route-poisoning-and-count-to-infinity-problem-in-routing/.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scalable routing:
    &lt;ul&gt;
      &lt;li&gt;AS (Autonomous system).&lt;/li&gt;
      &lt;li&gt;Intra-AS routing, also known as IGP (Interior gateway protocols):
        &lt;ul&gt;
          &lt;li&gt;RIP (Routing Information Protocol);&lt;/li&gt;
          &lt;li&gt;OSPF (Open Shortest Path First, IS-IS (Intermediate System to Intermediate System) is essentially same as OSPF):
            &lt;ul&gt;
              &lt;li&gt;Using link-state algorithm (Dijkstra’s algorithm) over IP;&lt;/li&gt;
              &lt;li&gt;Support security, can have multiple same-cost paths, support both uni- and multi-cast, can be hierarchical.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;IGRP (Interior Gatewat Routing Protocol).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Inter-AS routing:
        &lt;ul&gt;
          &lt;li&gt;BGP (Border Gateway Protocol):
            &lt;ul&gt;
              &lt;li&gt;eBGP: Obtain subnet reachability information from neighboring ASes;&lt;/li&gt;
              &lt;li&gt;iBGP: Propagate reachability information to all AS-internal routers;&lt;/li&gt;
              &lt;li&gt;Exchange over TCP connection;&lt;/li&gt;
              &lt;li&gt;Hot potatp routing: Choose local gateway with least cost, don’t worry about inter-domain cost.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Intra-AS can focus on performance, while for inter-AS, policy may dominate over performance.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems with traditional routing algorithms: Can’t manipulate routes, do load balancing. But SDN can achieve that.&lt;/li&gt;
  &lt;li&gt;ICMP: Internet control message protocol:
    &lt;ul&gt;
      &lt;li&gt;Network-layer “above” IP: ICMP carried in IP datagrams;&lt;/li&gt;
      &lt;li&gt;Used to report errors (unreachable host), echo request/reply (ping).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SNMP (Simple network management protocol), MIB (Management Information Base).&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;chapter-6&quot;&gt;Chapter 6&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Link layer implemented in “adaptor” (network interface card NIC) or on a chip.&lt;/li&gt;
  &lt;li&gt;Cyclic redundancy check:
    &lt;ul&gt;
      &lt;li&gt;Let D be the data, G be r+1 bits generator, R be r CRC bits;&lt;/li&gt;
      &lt;li&gt;R = remainder(D * 2&lt;sup&gt;r&lt;/sup&gt; / G);&lt;/li&gt;
      &lt;li&gt;Can detect all burst errors less than r+1 bits.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC protocols:
    &lt;ul&gt;
      &lt;li&gt;Channel parititioning:
        &lt;ul&gt;
          &lt;li&gt;TDMA: Time division multiple access;&lt;/li&gt;
          &lt;li&gt;FDMA: Frequency division multiple access;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Random access protocols:
        &lt;ul&gt;
          &lt;li&gt;Slotted ALOHA: If collison, retransmit frame in subsequent slot with probility p until success. Efficiency: 37%;&lt;/li&gt;
          &lt;li&gt;ALOHA: Similiar to slotted ALOHA, but no slots. Efficiency: 18%;&lt;/li&gt;
          &lt;li&gt;CSMA (Carrier sense multiple access):
            &lt;ul&gt;
              &lt;li&gt;If channel sensed idle: transmit. Collisions can still occur due to delay;&lt;/li&gt;
              &lt;li&gt;CSMA/CD: Collisions detected within short time and aborted; Binary (exponential) backoff after collision.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Taking turns: Polling from central site, token passing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MAC address (48 bits).
    &lt;ul&gt;
      &lt;li&gt;ARP (Address resolution protocol): A wants to send datagram to B, A broadcasts ARP query, B receives it and reply to A with its MAC address, A caches IP-MAC pair.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ethernet: “Dominant” wired LAN technology.
    &lt;ul&gt;
      &lt;li&gt;Physical topology: bus, star.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Switch:
    &lt;ul&gt;
      &lt;li&gt;Maintain a self-learned switch table;&lt;/li&gt;
      &lt;li&gt;
        &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;if entry found for dest:
    if dest from which frame arrived:
        drop
    else:
        forward frame
else:
    flood
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VLAN (Virtual Local Area Network): Multiple virtual LANs over single LAN infrastructure.&lt;/li&gt;
  &lt;li&gt;Multiprotocol label switching (MPLS): High-speed IP forwarding using fixed length label (instead of IP address), using information of both src and dest.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="求职" /><category term="网络" /><summary type="html">Facebook 这个岗位虽然叫 Network Engineer，但是它的 OA 基本只考了 BGP 这一个协议，而且考得十分的深入。如果没有直接相关经历，可能很难通过它的考核。不过总结出的这份资料对我以后还是蛮有用的。</summary></entry><entry><title type="html">软件验证与测试期中复习笔记</title><link href="/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="软件验证与测试期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E8%BD%AF%E4%BB%B6%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/SVT%20Midterm%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">功利上来说这门对求职不会有特别大的帮助，因为每个公司都会有一套自家的软件测试流程，但是在学生时期建立起软件测试的思维还是挺有意义的。</summary></entry><entry><title type="html">图像与视频处理期中复习笔记</title><link href="/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="图像与视频处理期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E5%9B%BE%E5%83%8F%E4%B8%8E%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;不喜欢数学或者数学功底薄弱的同学慎选。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/IVP%20Midterm%20Cheatsheet%202.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">不喜欢数学或者数学功底薄弱的同学慎选。</summary></entry><entry><title type="html">计算机系统导论期中复习笔记</title><link href="/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="计算机系统导论期中复习笔记" /><published>2019-10-28T21:00:00-07:00</published><updated>2019-10-28T21:00:00-07:00</updated><id>/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;极力推荐这门课程。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/Fall%202019/FCS%20Midterm%20Cheatsheet.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">极力推荐这门课程。</summary></entry><entry><title type="html">LeetCode 刷题总结 1-50</title><link href="/2019/09/16/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93-1-50.html" rel="alternate" type="text/html" title="LeetCode 刷题总结 1-50" /><published>2019-09-16T21:00:00-07:00</published><updated>2019-09-16T21:00:00-07:00</updated><id>/2019/09/16/LeetCode%20%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93%201-50</id><content type="html" xml:base="/2019/09/16/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93-1-50.html">&lt;p&gt;为了找工作，题还是要刷起来~&lt;/p&gt;

&lt;h4 id=&quot;problem-4&quot;&gt;Problem 4&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 我们很容易想到需要使用二分来完成这道题，但它的输入却是两个数组，这使普通的二分对此题无效。解这道题的关键在于意识到如果数组 1 的 break point i 确定了，那么数组 2 的 break point j 也就确定了，因为我们需要维持中位数两端数字个数一致，因此我们只需要对 i 进行二分即可。这道题即使想到这里可能也需要一些时间才能写出，实现时我们需要对奇偶等一些细节进行判断。&lt;/p&gt;

&lt;h5 id=&quot;problem-5&quot;&gt;Problem 5&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 看到这道题的直观想法是生成一个倒序字符串，然后使用动规找出最长公共子串，但是这样做需要考虑一种情况：acxyzca，它的“ac”和“ca”会被匹配到一起；另一种做法是直接动规，但是这道题最快的解法其实是最简单的解法，那就是遍历字符串的每一个字符，同时往两端查找，虽然这种做法和动规同样是 O(n^2) 的最坏复杂度，但是考虑到多数情况下字符串都不对称，因此它的实际复杂度应该接近于 O(n)。我相信这道题应该还有更快的解法，但是刚刚提到的解法已经可以满足这道题的速度要求了。&lt;/p&gt;

&lt;h5 id=&quot;problem-11&quot;&gt;Problem 11&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/container-with-most-water/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 我们显然不能使用暴力 O(n^2) 来解这道题，凭直觉来看也不大可能是任何带 log 的复杂度，因此我们只能硬着头皮使用 O(n) 复杂度的算法：贪心。想出贪心算法非常简单，贪心的难点永远在于对它正确性的证明。&lt;/p&gt;

&lt;p&gt;这道题我们使用的贪心算法是：起初将左边界和右边界分别安放在最两端，然后我们将较矮的那个边界向中心收，以此循环，直到左右边界相碰，最优解一定存在于这个过程的某个状态中。我们需要通过反证法来证明这个算法的正确性：假设某一时刻左边界为 i，右边界为 j，我们假设左边界较矮，因此我们需要进行 i++。算法的反面是，存在一个最优解，它的左边界就是 i，右边界是小于 j 的某一个值，而我们 i++ 时把它错过了。我们很容易证明这个反面的错误性，因为任何以 i 为左边界，右边界小于 j 的容器体积都不可能有容器 (i, j) 大，这与我们的假设矛盾，也从而我们证明了贪心算法的正确性。&lt;/p&gt;

&lt;h5 id=&quot;problem-16&quot;&gt;Problem 16&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum-closest/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 这道题的解法其实很直观，暴力的话我们需要三重循环，但是其实这里有一个非常简单有效的优化，我们可以把首尾合到一个循环里，这样我们就可以使用 O(n^2) 的复杂度来解出这道题了。&lt;/p&gt;

&lt;h5 id=&quot;problem-31&quot;&gt;Problem 31&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 先举一个例子：126543，它的下一个排列数是 132456。通过这个例子我们便已经可以得出算法了：倒序搜索这个数，找到第一个下降的点 2，颠倒它之后的所有数字 123456，再交换它与它之后的那个数字即可。&lt;/p&gt;

&lt;h5 id=&quot;problem-32&quot;&gt;Problem 32&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-valid-parentheses/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 直接给出一维动规的解法，这个答案有点巧妙：假设我们已经找到了当字符串长度小于 n - 1 时最长合理括号的所有答案，那么如果第 n 位是“(”，答案保持不变；如果第 n 位是“)”，那么答案分两种情况：1. 如果第 n - 1 位是“(”，那么答案为上一步的答案加 2；2. 如果第 n - 1 位是“)”，上一步的答案为 a，那么答案为上一步的答案加 2 加上追踪到 a + 1 步前的答案。&lt;/p&gt;

&lt;p&gt;一个简单的例子是：()((()))，前 7 步的答案是 ans = [0, 2, 2, 2, 2, 2, 4]，那么第 8 步的答案为 ans[7] + 2 + ans[7 - ans[7] - 1] = 4 + 2 + ans[2] = 8。&lt;/p&gt;

&lt;h5 id=&quot;problem-37&quot;&gt;Problem 37&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sudoku-solver/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 不用多想，DFS 是效率最高的解。&lt;/p&gt;

&lt;h5 id=&quot;problem-41&quot;&gt;Problem 41&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/first-missing-positive/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 这道题很有意思，我们需要意识到一个问题，如果数组长度是 n 的话，那么我们需要找的那个丢掉的数一定是小于 n 的。根据这个思路我们就可以得出解决了，我们只需要遍历一下这个数组，如果扫描到数字 x，那么我们就把它放在第 x 位，如果 x 超出了 n，那么我们直接不管它即可；接着我们再扫描一次数组，找出数字不等于位置的第一个数，那个位置就是我们需要找的第一个丢失的整数。&lt;/p&gt;

&lt;h5 id=&quot;problem-42&quot;&gt;Problem 42&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/trapping-rain-water/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 首先说这题的暴力思路：遍历每一个位置，往左往右找到边界，该位置的水的体积就是左右边界中的小值，这样的复杂度时 O(n^2)。优化它的思路也很简单，我们只需要实现正序倒序各遍历一次数组，求出每个位置的左右边界，计算水体积的时候直接查表，就可以成功地将复杂度压缩到 O(n)。&lt;/p&gt;

&lt;h5 id=&quot;problem-45&quot;&gt;Problem 45&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 我觉得这个问题是有难度的。我们很容易可以想出 O(n^2) 复杂度的解，但是我们需要用线性的时间来完成这道题。解决它的思路是使用 BFS 去搜索，但是我们不会将图给建起来，因为建图的代价本身就是 O(n^2)。这里用了一个小技巧来标记 BFS 的 level，那就是当前能达到的最远的点：一旦越过了这个点，那么我们就需要另一跳来达到它之后的点。&lt;/p&gt;

&lt;p&gt;还是举一个简单的例子：[2, 3, 1, 1, 4]，第一 level 是 2，因为 0 跳只能到起始点；第二 level 是 3， 1，因为根据 0 + 2 我们最远只能到 1 的位置；第三 level 是 1，4，因为 1 + 3 已经可以达到终点 4 了。&lt;/p&gt;

&lt;p&gt;算法做的事情很简单，线性地扫描一次数组，如果当前位置超过了当前最大值，那么跳数加一；如果没有则看当前位置加当前距离能否更新当前最大值。当走到终点时的跳数就是我们需要的答案。&lt;/p&gt;</content><author><name></name></author><category term="算法" /><category term="求职" /><summary type="html">为了找工作，题还是要刷起来~</summary></entry><entry><title type="html">如何写出高效的代码期末复习笔记</title><link href="/2019/05/09/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="如何写出高效的代码期末复习笔记" /><published>2019-05-09T21:00:00-07:00</published><updated>2019-05-09T21:00:00-07:00</updated><id>/2019/05/09/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/05/09/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;这门课的内容很不错，但是质量并不是很好，慎选。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/blog%20images/Fast%20Code/Fast%20Code%20Final%20Cheat%20Sheet.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">这门课的内容很不错，但是质量并不是很好，慎选。</summary></entry><entry><title type="html">面向服务的计算期末复习笔记</title><link href="/2019/05/07/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="面向服务的计算期末复习笔记" /><published>2019-05-07T21:00:00-07:00</published><updated>2019-05-07T21:00:00-07:00</updated><id>/2019/05/07/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/05/07/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;这门课程所使用的教材是 Jia Zhang 老师自己编写的 Services Computing，课程内容其实相对老旧，不过我之前没有 Java 方面的经验，这门课还是让我学到了很多。&lt;/p&gt;

&lt;h4 id=&quot;week-1&quot;&gt;Week 1&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Generations of Software Engineering:
    &lt;ul&gt;
      &lt;li&gt;1st: Waterfall, compiler, OS, &lt;strong&gt;&lt;em&gt;programming language&lt;/em&gt;&lt;/strong&gt;;&lt;/li&gt;
      &lt;li&gt;2nd: Stuffs we learned in FSE (OOAD, patterns, modeling…);&lt;/li&gt;
      &lt;li&gt;3rd: SOC, &lt;strong&gt;&lt;em&gt;platform&lt;/em&gt;&lt;/strong&gt; is the key.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service operational models:
    &lt;ul&gt;
      &lt;li&gt;Hosted service model;&lt;/li&gt;
      &lt;li&gt;Business process outsourcing;&lt;/li&gt;
      &lt;li&gt;Data-center outsourcing;&lt;/li&gt;
      &lt;li&gt;Services through online broker agency.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service charge models:
    &lt;ul&gt;
      &lt;li&gt;Free-of-charge models;&lt;/li&gt;
      &lt;li&gt;Fee-based models;&lt;/li&gt;
      &lt;li&gt;Government service models.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Level Agreement (SLA): Pay more for better service. Can support large user base and usage scenarios.&lt;/li&gt;
  &lt;li&gt;A service-oriented system is modeled as a feedback system.&lt;/li&gt;
  &lt;li&gt;Service lifecycle:
    &lt;ul&gt;
      &lt;li&gt;Consulting &amp;amp; strategic plan;&lt;/li&gt;
      &lt;li&gt;Service engagement;&lt;/li&gt;
      &lt;li&gt;Service delivery;&lt;/li&gt;
      &lt;li&gt;Service operation;&lt;/li&gt;
      &lt;li&gt;Billing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vertical services: Service industries (banking, telecom, …); Horizontal services: Commom services (Business services: CRM, …, has business logic, supports multiple scenarios; IT services: database, OS).&lt;/li&gt;
  &lt;li&gt;SOC is a discipline (umbrella); SOA is a architectural model (overall software system design); Web service is the best enabling technology.&lt;/li&gt;
  &lt;li&gt;Typical service system: &amp;lt;Inputs, Outputs, Goals, Transformation, Components, Sensors&amp;gt;.&lt;/li&gt;
  &lt;li&gt;IT-enabled service: Outsourcing of processes that can be enabled with information technology and covers diverse areas; It’s about relationship between providers and consumers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-2&quot;&gt;Week 2&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;HTML and XML are both based on SGML (Standard Generalized Markup Language).&lt;/li&gt;
  &lt;li&gt;XML tags are case-sensitive.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;![CDATA[This is a comment]]&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Each XML document must have a unique first element: the root node.&lt;/li&gt;
  &lt;li&gt;DTD serves as the &lt;strong&gt;&lt;em&gt;grammar&lt;/em&gt;&lt;/strong&gt; for underlying XML document. Example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-DTD&quot;&gt;&amp;lt;!DOCTYPE db[
    &amp;lt;!ELEMENT db(person*)&amp;gt;
    &amp;lt;!ELEMENT person(name, age, email)&amp;gt;
    &amp;lt;!ELEMENT name(#PCDATA)&amp;gt;
    &amp;lt;!ELEMENT age(#PCDATA)&amp;gt;
    &amp;lt;!ELEMENT email(#PCDATA)&amp;gt;
]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;XML Schema: Grammar for specifying valid XML documents. It is XML itself, so it’s verbose. Example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;xs:element name=&quot;note&quot;&amp;gt;
    &amp;lt;xs:complexType&amp;gt;
        &amp;lt;xs:sequence&amp;gt;
            &amp;lt;xs:element name=&quot;to&quot; type=&quot;xs:string&quot; /&amp;gt;
            &amp;lt;xs:element name=&quot;from&quot; type=&quot;xs:string&quot; /&amp;gt;
            &amp;lt;xs:element name=&quot;heading&quot; type=&quot;xs:string&quot; /&amp;gt;
            &amp;lt;xs:element name=&quot;body&quot; type=&quot;xs:string&quot; /&amp;gt;
        &amp;lt;/xs:sequence&amp;gt;
    &amp;lt;/xs:complexType&amp;gt;
&amp;lt;/xs:element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;DTD vs. XML Schema:
    &lt;ul&gt;
      &lt;li&gt;DTD (Old): Learning curve but terse;&lt;/li&gt;
      &lt;li&gt;XML Schema: Verbose but powerful (extensible, data types, namespaces).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XML parsing:
    &lt;ul&gt;
      &lt;li&gt;DOM (Document Object Model): Load whole XML document in memory: Faster;&lt;/li&gt;
      &lt;li&gt;SAX (Simple API for XML Parsing): Supports larger files.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XPath examples:&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/1.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/2.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;XQuery: For, Let, Where, Order by, Return (FLWOR). Example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-XQuery&quot;&gt;for $x in doc(&quot;book.xml&quot;)/bookstore/book
where $x/price &amp;gt; 30
order by $x/title
return $x/title
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Other information:
    &lt;ul&gt;
      &lt;li&gt;JSON also has JSON Schema for validation;&lt;/li&gt;
      &lt;li&gt;Same Origin Policy (SOP): Full access to same origin (network, documents, storage, cookies);&lt;/li&gt;
      &lt;li&gt;XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other documents;&lt;/li&gt;
      &lt;li&gt;XML data binding refers to the process of representing the information in an XML document as an object in computer memory.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-3&quot;&gt;Week 3&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;REST (Representational State Transfer) is a server-side technique; AJAX is a web technique which can only retrieve data from the server side. AJAX can be part of REST but REST can never be AJAX.&lt;/li&gt;
  &lt;li&gt;HTTP (Hypertext Transfer Protocol).&lt;/li&gt;
  &lt;li&gt;Mashup:
    &lt;ul&gt;
      &lt;li&gt;Pros: lightweight app, lightweight &amp;amp; rapid development, low cost for gathering data;&lt;/li&gt;
      &lt;li&gt;Cons: Dependency, versioning, copyright, security.&lt;/li&gt;
      &lt;li&gt;Component discovery &amp;amp; selection -&amp;gt; Composition &amp;amp; immediate deployment -&amp;gt; Use and evolution -&amp;gt; … (loop).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-4&quot;&gt;Week 4&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;WSDL (Web Service Description Language). WSDL 1.1 example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;message name=&quot;getPriceRequest&quot;&amp;gt;
    &amp;lt;part name=&quot;productId&quot; type=&quot;xs:string&quot; /&amp;gt;
&amp;lt;/message&amp;gt;

&amp;lt;message name=&quot;getPriceResponse&quot;&amp;gt;
    &amp;lt;part name=&quot;value&quot; type=&quot;xs:string&quot; /&amp;gt;
&amp;lt;/message&amp;gt;

&amp;lt;portType name=&quot;productPrice&quot;&amp;gt;
    &amp;lt;operation&amp;gt;
        &amp;lt;input message=&quot;getPriceRequest&quot; /&amp;gt;
        &amp;lt;output message=&quot;getPriceResponse&quot; /&amp;gt;
    &amp;lt;/operation&amp;gt;
&amp;lt;/portType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;SOAP (Single Object Access Protocol) acts as the &lt;strong&gt;&lt;em&gt;messaging protocol&lt;/em&gt;&lt;/strong&gt; binding to HTTP and SMTP:
    &lt;ul&gt;
      &lt;li&gt;WSDL binding to SOAP: In WSDL, you will need to specify binding with SOAP, then you can write SOAP message to communicate with the service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BPEL (Business Process Execution Language):
    &lt;ul&gt;
      &lt;li&gt;WSDL / REST supports a stateless model; While a business process (BP) is characterized by long-running, stateful sequence of operations;&lt;/li&gt;
      &lt;li&gt;Business process orchestration;&lt;/li&gt;
      &lt;li&gt;BPEL also has &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;throw&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;catch&amp;gt;&lt;/code&gt;;&lt;/li&gt;
      &lt;li&gt;Example:&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/4.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WSRF (Web Services Resource Framework) is stateful.&lt;/li&gt;
  &lt;li&gt;WS-I (Web Services Interoperability) organization is to tackle the challenges of interoperability among web services by introducing conventions and best practices.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-5&quot;&gt;Week 5&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;A web service can be published in a centralized services registry or a distributed services registry:
    &lt;ul&gt;
      &lt;li&gt;UDDI (Universal Description Discovery and Integration) registry is one typical example of centralized ~:
        &lt;ul&gt;
          &lt;li&gt;Four elements: BusinessEntity, BusinessService, BindingTemplate, tModel.&lt;/li&gt;
          &lt;li&gt;WSDL and UDDI:&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/7.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;UDDI Search Markup Language (USML) for supporting “Google” style services Search.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;WSIL (Web Services Inspection Language) is one example of publishing web services as distributed documents. Example:&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Advanced UDDI Search Engine (AUSE); Dynamic Service Discovery Framework (DSDF);&lt;/li&gt;
      &lt;li&gt;The federated framework provides a uniform interface for both UDDI-based and WSIL-based service discovery.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-7&quot;&gt;Week 7&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;LDA (Latent Dirichlet Allocation): Using Gibbs Sampling to calculate the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-10&quot;&gt;Week 10&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;MetaWSDL is a superset of WSDL: &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/8.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;It should be published to the Internet associated with the original WSDL documents.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ESB (Enterprise Service Bus) consists of 4 components: mediators, services registry, choreographer, rule engine. ESB can do:
    &lt;ul&gt;
      &lt;li&gt;Routing;&lt;/li&gt;
      &lt;li&gt;Message transformation: XML to object),&lt;/li&gt;
      &lt;li&gt;Message enhancement: Supply data included in original data;&lt;/li&gt;
      &lt;li&gt;Protocol transformation;&lt;/li&gt;
      &lt;li&gt;Service mapping;&lt;/li&gt;
      &lt;li&gt;Message processing;&lt;/li&gt;
      &lt;li&gt;Process choreography: Co-ordination of multiple &lt;strong&gt;&lt;em&gt;business services&lt;/em&gt;&lt;/strong&gt;, usually BPEL-based;&lt;/li&gt;
      &lt;li&gt;Services orchestration: Co-ordination of multiple &lt;strong&gt;&lt;em&gt;implement services&lt;/em&gt;&lt;/strong&gt;, usually BPEL-based;&lt;/li&gt;
      &lt;li&gt;Transaction management;&lt;/li&gt;
      &lt;li&gt;Security.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SOA Reference Architecture (SOA-RA) partitions an SOA-based system into reusable achitecture components.&lt;/li&gt;
  &lt;li&gt;Service-Oriented Modeling and Architecture (SOMA) guides a generic engineering process. It identifies 3 steps: identification, specification, realization.&lt;/li&gt;
  &lt;li&gt;Different layers of web service standards:
    &lt;ul&gt;
      &lt;li&gt;Transport Layer: HTTP / HTTPS, SMTP (Simple Mail Transport Protocol, on port 25), RMI (Java Remote Method Invocation) / IIOP (Internet Inter-ORB Protocol), JMS (Java Message Service);&lt;/li&gt;
      &lt;li&gt;Messaging Layer: XML, SOAP, WS-Adressing, WS-Renewable;&lt;/li&gt;
      &lt;li&gt;Description / Publishing / Discovery Layer: XSD (XML Schema Definition), WSDL, WSRF (WS-Resource Framework), WS-Resource Properties (part of WSRF), UDDI, Others (WS-Based Faults, WS-Policy, WS-Metadata Exchange);&lt;/li&gt;
      &lt;li&gt;QoS (Quality of Service Layer): WS-Security, WS-Policy, WS-TM (WS-Transaction Management), WS-Reliable Messaging, WS-Resource Lifetime;&lt;/li&gt;
      &lt;li&gt;Service Composition Layer: SOAP + WSDL + UDDI, BPEL4WS, WS-Service Group, WS-Notification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Industry-specific service-oriented standards:
    &lt;ul&gt;
      &lt;li&gt;Electronic Industry: RosettaNet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-11&quot;&gt;Week 11&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;BPOL (Business Process Outsourcing Language).&lt;/li&gt;
  &lt;li&gt;SGA (Simple Genetic Algorithm) steps:
    &lt;ul&gt;
      &lt;li&gt;Select parents from population;&lt;/li&gt;
      &lt;li&gt;Shuffle mating pool;&lt;/li&gt;
      &lt;li&gt;For each pair, apply crossover with probability p&lt;sub&gt;c&lt;/sub&gt;;&lt;/li&gt;
      &lt;li&gt;For each offspring, apply mutation with probability p&lt;sub&gt;m&lt;/sub&gt; for each bit;&lt;/li&gt;
      &lt;li&gt;Replace old population with new offsprings.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mutation-only-EA is possible, xover-only-EA won’t work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-12&quot;&gt;Week 12&lt;/h4&gt;

&lt;p&gt;🍺&lt;/p&gt;

&lt;h4 id=&quot;week-13&quot;&gt;Week 13&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;RDF (Resource Description Framework):
    &lt;ul&gt;
      &lt;li&gt;It also has RDFS (RDF Schema): XMLS (XML Schema) is not an ontology language, while RDFS is an ontology language;&lt;/li&gt;
      &lt;li&gt;It is graphical formalism;&lt;/li&gt;
      &lt;li&gt;It supports containers: Bag, Seq, Alt.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In graph database, we have: Subject –Predicate–&amp;gt; Object; In RDF statement, we have: Resource –Property–&amp;gt;Value.&lt;/li&gt;
  &lt;li&gt;Relational Database has tables with pre-defined schema, while RDF has knowledge without constraints.&lt;/li&gt;
  &lt;li&gt;SPARQL (SPARQL Protocol and RDF Query Language):
    &lt;ul&gt;
      &lt;li&gt;SELECT, ASK (return a boolean), DESCRIBE, CONSTRUCT;&lt;/li&gt;
      &lt;li&gt;FILTER, DISTINCT, ORDER BY, LIMIT, OFFSET;&lt;/li&gt;
      &lt;li&gt;UNION (like “or”), OPTIONAL;&lt;/li&gt;
      &lt;li&gt;FROM, FROM NAMED.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Turtle (Terse RDF Triple Language). Turtle and SPARQL example: &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/9.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-14&quot;&gt;Week 14&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;A more complex example of RDF: &lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/SOC/10.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;OWL (Web Ontology Language); OWL-S (Semantic Markup for Web Service).&lt;/li&gt;
  &lt;li&gt;WSMF (Web Service Modeling Framework).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-15&quot;&gt;Week 15&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;A microservices architecture puts each element of functionality into a separate service. Modules run in different processes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;key-information&quot;&gt;Key Information&lt;/h4&gt;

&lt;h5 id=&quot;web-service-standard-stack&quot;&gt;Web Service Standard Stack&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Transport layer: Provides core communication and interactions for web services.
    &lt;ul&gt;
      &lt;li&gt;HTTP / HTTPS: Runs on 80 / 443; Over TCP; Request / response protocol to transfer information over the Internet;&lt;/li&gt;
      &lt;li&gt;SMTP: Runs on 25; Simple Mail Transfer Protocol; Text-based protocol to send mail over the Internet;&lt;/li&gt;
      &lt;li&gt;RMI / IIOP: Java Romote Method Invocation to create distributed Java-based app; Internet Inter-ORB Protocol is a tranport protocol for communication under CORBA;&lt;/li&gt;
      &lt;li&gt;JMS (Java Message Service): A standard for reliable enterprise messaging.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Messaging layer: Appropriately formats messages for exchanging information between web services.
    &lt;ul&gt;
      &lt;li&gt;XML: “Common language” for services to exchange information;&lt;/li&gt;
      &lt;li&gt;SOAP: A simple, lightweight protocol to exchange structured and typed information;&lt;/li&gt;
      &lt;li&gt;WS-Adressing: Identifies WS endpoints, and to secure end-to-end identifications in messages;&lt;/li&gt;
      &lt;li&gt;WS-Renewable: provides a mechanism for renewing reference to web resource.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Description / Publishing / Discovery layer: No need to explain.
    &lt;ul&gt;
      &lt;li&gt;XSD: XML Schema Definition, no need to explain;&lt;/li&gt;
      &lt;li&gt;WSDL: No need to explain;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;WS-Resource Property: Part of WSRF, describes how to view and modify web resourse;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;UDDI: No need to explain;&lt;/li&gt;
      &lt;li&gt;WS-Base Faults: Defines an XML Schema type for base faults, and how they can be extended;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;WS-Policy: Describe capabilities, requirements and general characteristics of a WS;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;WS-Metadata Exchange: Facilitate the retrieval of metadata from WS.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;QoS layer: Addresses the NFR of WS.
    &lt;ul&gt;
      &lt;li&gt;WS-Security: A set of mechanisms to secure SOAP message exchange;&lt;/li&gt;
      &lt;li&gt;WS-TM: “TM” for “Transaction Model”, protocols for managing transaction features in business activities;&lt;/li&gt;
      &lt;li&gt;WS-Resource Lifetime: To inspect and moniter the lifetime of WS and how WS can be destroyed;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Composition Layer: Allows developers to compose services together for a common business goal.
    &lt;ul&gt;
      &lt;li&gt;BPEL4WS: No need to explain;&lt;/li&gt;
      &lt;li&gt;WS-Service Group: A wide variety of collections of web services or WS-Resources;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;WS-Notification: A set of specifications that provide support for events.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">这门课程所使用的教材是 Jia Zhang 老师自己编写的 Services Computing，课程内容其实相对老旧，不过我之前没有 Java 方面的经验，这门课还是让我学到了很多。</summary></entry><entry><title type="html">软件工程基础期末复习笔记</title><link href="/2019/04/20/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="软件工程基础期末复习笔记" /><published>2019-04-20T21:00:00-07:00</published><updated>2019-04-20T21:00:00-07:00</updated><id>/2019/04/20/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/04/20/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;虽然本科的时候学过软件工程，但是知识早已忘光。因此我希望将这学期所学到的内容记录下来。&lt;/p&gt;

&lt;h4 id=&quot;week-1&quot;&gt;Week 1&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Evolution of Software Engineering:
    &lt;ul&gt;
      &lt;li&gt;Waterfall Approach;&lt;/li&gt;
      &lt;li&gt;Iterative &amp;amp; Incremental Approach:
        &lt;ul&gt;
          &lt;li&gt;Work is prioritized based on &lt;strong&gt;&lt;em&gt;risk&lt;/em&gt;&lt;/strong&gt;;&lt;/li&gt;
          &lt;li&gt;Examples: Spiral, Rational Unified Process (RUP).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Agile Approach:
        &lt;ul&gt;
          &lt;li&gt;Work is prioritized based on &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;;&lt;/li&gt;
          &lt;li&gt;Examples: XP, Scrum, Feature-Driven Development (FDD), Dynamic System Development Method (DSDM), Adaptive Software Development (ASD), Crystal Method.&lt;/li&gt;
          &lt;li&gt;Key barrier: Inability to change organization culture.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lean Approach:
        &lt;ul&gt;
          &lt;li&gt;Optimize flows by reducing waste; Main prioritization criteria is still &lt;strong&gt;&lt;em&gt;value&lt;/em&gt;&lt;/strong&gt;;&lt;/li&gt;
          &lt;li&gt;From Toyota;&lt;/li&gt;
          &lt;li&gt;Examples: Lean, Kanban.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Hybrid Approach:
        &lt;ul&gt;
          &lt;li&gt;Examples: Scrumban, Scaled Agile Framework (SAFe), Disciplined Agile Delivery (DAD).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Agile:&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Values&lt;/th&gt;
      &lt;th&gt;Practices&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Customer collaboration&lt;/td&gt;
      &lt;td&gt;Onsite customer (XP), Embedded product manager (Scrum)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Responding to change&lt;/td&gt;
      &lt;td&gt;Continuously updated &amp;amp; prioritized product backlog (Scrum)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working software&lt;/td&gt;
      &lt;td&gt;Iterative Development (Sprints) &amp;amp; Sprint Review (Scrum)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Individuals and interations&lt;/td&gt;
      &lt;td&gt;Sprint retrospective (Scrum)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;XP:
    &lt;ul&gt;
      &lt;li&gt;Test first, pair programming, incremental design.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other:
    &lt;ul&gt;
      &lt;li&gt;Scrum has “product owner”, “development team” and “Scrum master”, while Kanban has no roles;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-2&quot;&gt;Week 2&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Iron Triangle for Planning (Project Constraints):
    &lt;ul&gt;
      &lt;li&gt;Fixed-scope: Then variables are time and cost;&lt;/li&gt;
      &lt;li&gt;Fixed-date: Then varaible is scope.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Scope&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quality&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cost&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;——-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Time&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;Definition of “Done” (DOD): two columns: Task/Action, Quality Check, or just one column like the ones on Trello;&lt;/li&gt;
  &lt;li&gt;People usually underestimate by a factor of 2;&lt;/li&gt;
  &lt;li&gt;Planning Poker combines analogy, disaggregation and expert judgment.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-3&quot;&gt;Week 3&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Four principles of OO:
    &lt;ul&gt;
      &lt;li&gt;Abstraction: Essential characteristics of an entity relative to certain perspective; Manage complexity by eliminating details;&lt;/li&gt;
      &lt;li&gt;Encapsulation: Facilitate information hiding; Manage complexity by grouping related elements into a single entity;&lt;/li&gt;
      &lt;li&gt;Hierachy: Ranking or ordering entities into a tree-like structure; Manage complexity by organizing into this tree-like structure:
        &lt;ul&gt;
          &lt;li&gt;Aggregation: is-part-of;&lt;/li&gt;
          &lt;li&gt;Inheritance: is-a-kind-of, implements polymorphos, which means having many forms;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Modularity: Manage complexity by breaking large entities into smaller, independent and cohesive modules (low coupling, high cohesion).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Apart from aggregation and inheritance, there’s association (knows-about relation);&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-4&quot;&gt;Week 4&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Analysis vs Design:
    &lt;ul&gt;
      &lt;li&gt;Analysis:
        &lt;ul&gt;
          &lt;li&gt;Focus on understanding the problem: WHAT;&lt;/li&gt;
          &lt;li&gt;Define behavior and structure;&lt;/li&gt;
          &lt;li&gt;Analysis classes, interaction diagrams, class diagrams.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Design:
        &lt;ul&gt;
          &lt;li&gt;Focus on understanding the solution: WHY;&lt;/li&gt;
          &lt;li&gt;System design: Define a robust architecture (Use case view, logical view, development view, process view, deployment view);&lt;/li&gt;
          &lt;li&gt;Object design: Refine the design of components and classes for easy implementation (Design patterns).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;OOAD is architecture-centric. OOAD toolset can be leveraged as needed to create “good enough” models.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View of Participating Classes (VOPC).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-5&quot;&gt;Week 5&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Design patterns: Singleton; Bridge; Observer; Composite; Facade; Strategy; Factory Method; Adapter.&lt;/li&gt;
  &lt;li&gt;Hierarchy in Design Pattern (most basic mechanisms): Inheritance and Delegation;&lt;/li&gt;
  &lt;li&gt;SOLID Principles:
    &lt;ul&gt;
      &lt;li&gt;Single responsibility;&lt;/li&gt;
      &lt;li&gt;Open-closed principle: Open to extension, closed to modification;&lt;/li&gt;
      &lt;li&gt;Liskov’s substitution: One class can only be treated as a subtype of another if it can be substituted for the super class in every context;&lt;/li&gt;
      &lt;li&gt;Interface segregation: interfaces should be small and specialized;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle#/media/File:Dependency_inversion.png&quot;&gt;Dependency Inversion&lt;/a&gt;;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other Principles:
    &lt;ul&gt;
      &lt;li&gt;Dependency injection: &lt;a href=&quot;https://piazza.com/class/jqrne75jnbw58q?cid=69&quot;&gt;link&lt;/a&gt;;&lt;/li&gt;
      &lt;li&gt;Inversion of control principle: Traditionally, we write main function which controls the flow; Now we use framework, we just fill in the blanks. Framework controls the flow.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;7 ± 2 Rules: Number of subsystems, partitions, layers, functions per subsystem, components per subsystem should be no more than 9.&lt;/li&gt;
  &lt;li&gt;Architectural styles and patterns:
    &lt;ul&gt;
      &lt;li&gt;Architectural styles: Emphasize on organization, control flow, communication; More high level; Examples: Layered, pipe-and-filter, repository, client-server, peer-to-peer, event-based, hybrid/heterogeneous: compiler, REST, MVC;&lt;/li&gt;
      &lt;li&gt;Architectural patterns: Solve problems like security, federation, integration…;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Decomposition: Partitioning should increase cohesion, and layering should reduce coupling.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-6&quot;&gt;Week 6&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Technical practices: Pair programming, in-process testing, refactoring, version control (Diff based: CVS, SUBVERSION, file-based: git, mercurial / Centralized, distributed), continuous integration, incremental delivery.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-7&quot;&gt;Week 7&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Testing is a whole-team responsibility;&lt;/li&gt;
  &lt;li&gt;Components:
    &lt;ul&gt;
      &lt;li&gt;Entity Under Test (EUT);&lt;/li&gt;
      &lt;li&gt;Fixture: Test driver, test stub;&lt;/li&gt;
      &lt;li&gt;Test case:
        &lt;ul&gt;
          &lt;li&gt;Inputs or stimuli (triggers);&lt;/li&gt;
          &lt;li&gt;Oracle (expected behavior);&lt;/li&gt;
          &lt;li&gt;Outputs or results;&lt;/li&gt;
          &lt;li&gt;Assessment;&lt;/li&gt;
          &lt;li&gt;Verdict (pass or fail).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Others:
    &lt;ul&gt;
      &lt;li&gt;Test suite: collection of test cases;&lt;/li&gt;
      &lt;li&gt;Not all testing needs an oracle;&lt;/li&gt;
      &lt;li&gt;White-box testing misses unimplemented behaviors;&lt;/li&gt;
      &lt;li&gt;Black-box testing may miss unexpected behaviors;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-8&quot;&gt;Week 8&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Only intentional short-term focused debt and intentional long-term debt are healthy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-9&quot;&gt;Week 9&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Defect repairs (maintenance) are usually the largest annual cost;&lt;/li&gt;
  &lt;li&gt;Fight against defects:
    &lt;ul&gt;
      &lt;li&gt;Defect prevention: Reuse, formal inspection;&lt;/li&gt;
      &lt;li&gt;Pre-test defect removal: Formal inspection, static analysis, Scrum daily stand-up meetings;&lt;/li&gt;
      &lt;li&gt;Testing defect removal: Software testing has low defect removal efficiency;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Best practice: Review fewer than 200-400 lines of code at a time, no more than 60-90 minutes at a time, inspection rate less than 300-500 LOC / hour at a time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;week-10&quot;&gt;Week 10&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Requirements Envisioning:
    &lt;ul&gt;
      &lt;li&gt;Functional Requirements: Using Use Cases or User Stories;
        &lt;ul&gt;
          &lt;li&gt;INVEST criteria for stories: Independent, Negotiable, Valuable, Estimable, Small, Testable;&lt;/li&gt;
          &lt;li&gt;SMART criteria for tasks: Specific, Measurable, Achievable, Relevant, Time-boxed;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Non-Functional Requirements: Using Shall Statements or User Stories;&lt;/li&gt;
      &lt;li&gt;Validation: Using Prototypes;&lt;/li&gt;
      &lt;li&gt;Planning: Using Roadmaps and Backlogs;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Requirements Elaboration (just-in-time elaboration):
    &lt;ul&gt;
      &lt;li&gt;Use Case Specification (Basic Flow, Alternatives Flows);&lt;/li&gt;
      &lt;li&gt;User Story Acceptance Criteria (Given / When / Then);&lt;/li&gt;
      &lt;li&gt;Planguage for Non-Functional Requirements;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/FSE/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;week-11&quot;&gt;Week 11&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;External Qualities (Performance) &amp;amp; Internal Qualities (Testability);&lt;/li&gt;
  &lt;li&gt;Qualities Attributes of Architectural Styles:&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Maintainability&lt;/th&gt;
      &lt;th&gt;Security&lt;/th&gt;
      &lt;th&gt;Reliability&lt;/th&gt;
      &lt;th&gt;Usability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Layered&lt;/td&gt;
      &lt;td&gt;Key Strength&lt;/td&gt;
      &lt;td&gt;Key Strength&lt;/td&gt;
      &lt;td&gt;Strength&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pipe and Filter&lt;/td&gt;
      &lt;td&gt;Strength&lt;/td&gt;
      &lt;td&gt;Liability&lt;/td&gt;
      &lt;td&gt;Key Liability&lt;/td&gt;
      &lt;td&gt;Liability&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MVC&lt;/td&gt;
      &lt;td&gt;Liability&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;Key Strength&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;Design patterns generally improve the expandability of code, and decrease reusability;&lt;/li&gt;
  &lt;li&gt;Quality Attribute Tradeoffs are asymmetric.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;others&quot;&gt;Others&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;The behavior of the system can be modeled using a UML &lt;strong&gt;Use-case diagram&lt;/strong&gt;, Sequence diagram and Communication diagram.&lt;/li&gt;
  &lt;li&gt;The Facade pattern needs only delegations.&lt;/li&gt;
  &lt;li&gt;ES6 does not support class­-based inheritance.&lt;/li&gt;
  &lt;li&gt;Refactoring is enabled by in-process testing.&lt;/li&gt;
  &lt;li&gt;To be able to effectively test asynchronous behavior, we must isolate the behavior in a function, and make the side effect accessible to a test.&lt;/li&gt;
  &lt;li&gt;Technical debt is not incurred to save money in the long term.&lt;/li&gt;
  &lt;li&gt;“Feature debt”, or features in the backlog is not a type of technical debt.&lt;/li&gt;
  &lt;li&gt;Grace Hopper first came up with the term “bug”.&lt;/li&gt;
  &lt;li&gt;Latent defects: unknown defects, fixed defects, unfixed known defects.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">虽然本科的时候学过软件工程，但是知识早已忘光。因此我希望将这学期所学到的内容记录下来。</summary></entry><entry><title type="html">如何写出高效的代码期中复习笔记</title><link href="/2019/03/20/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="如何写出高效的代码期中复习笔记" /><published>2019-03-20T21:00:00-07:00</published><updated>2019-03-20T21:00:00-07:00</updated><id>/2019/03/20/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/2019/03/20/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;这门课的内容很不错，但是质量并不是很好，慎选。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;photo&quot; src=&quot;https://raw.githubusercontent.com/An0nym6/Images/master/blog%20images/Fast%20Code/Fast%20Code%20Cheat%20Sheet.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="学习笔记" /><summary type="html">这门课的内容很不错，但是质量并不是很好，慎选。</summary></entry></feed>